// Generated by CoffeeScript 1.6.3
(function() {
  var Browser, EventEmitter, cache_url, debug,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  debug = require('debug')('fantomo:lib:bot');

  Browser = require('./browser').Browser;

  EventEmitter = require('events').EventEmitter;

  cache_url = require('./utils').cache_url;

  module.exports.Bot = (function(_super) {
    __extends(Bot, _super);

    function Bot(options) {
      var _base;
      this.options = options != null ? options : {};
      debug('init');
      if ((_base = this.options).cache_dir == null) {
        _base.cache_dir = '/tmp';
      }
      if (this.init != null) {
        this.init();
      }
      Bot.__super__.constructor.apply(this, arguments);
    }

    Bot.prototype.cache_url = function(url, fn) {
      var opts;
      opts = {
        url: url,
        dir: this.options.cache_dir
      };
      return cache_url(opts, fn);
    };

    Bot.prototype.inject = function() {
      var args, b, browserify, code, filepath, opts,
        _this = this;
      code = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      switch (typeof code) {
        case 'function':
          debug("Injecting inline function");
          return this.evaluate.apply(this, [code].concat(__slice.call(args)));
        case 'string':
          browserify = require('browserify');
          filepath = code;
          b = browserify(filepath);
          opts = {};
          opts.standalone = 'fantomo';
          opts.debug = true;
          return b.bundle(opts, function(err, src) {
            var fn;
            if (err) {
              console.error(err);
              return;
            }
            fn = (function() {
              browserify = PLACEHOLDER;
              return fantomo.apply(null, arguments);
            }).toString().replace('PLACEHOLDER', src);
            eval("var fn = " + fn + ";");
            return _this.evaluate.apply(_this, [fn].concat(__slice.call(args)));
          });
        default:
          throw "Injected code must be filename, dirname or inline javascript code";
      }
    };

    return Bot;

  })(Browser);

}).call(this);
