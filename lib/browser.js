// Generated by CoffeeScript 1.6.2
(function() {
  var EventEmitter, phantom,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  EventEmitter = require('events').EventEmitter;

  phantom = require('phantom');

  module.exports.Browser = (function(_super) {
    __extends(Browser, _super);

    function Browser(options, fn) {
      var _base, _base1, _base2, _base3, _base4, _base5, _base6, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

      this.options = options != null ? options : {};
      if (fn == null) {
        fn = (function() {});
      }
      this.open = __bind(this.open, this);
      this.onPageAlert = __bind(this.onPageAlert, this);
      this.onPageConsoleMessage = __bind(this.onPageConsoleMessage, this);
      this.onPageError = __bind(this.onPageError, this);
      this.onResourceReceive = __bind(this.onResourceReceive, this);
      this.onResourceRequested = __bind(this.onResourceRequested, this);
      this.init = __bind(this.init, this);
      this.evaluate = __bind(this.evaluate, this);
      this.debug = __bind(this.debug, this);
      if ((_ref = (_base = this.options).userAgent) == null) {
        _base.userAgent = 'NodeJS/Phantomo';
      }
      if ((_ref1 = (_base1 = this.options).viewportSize) == null) {
        _base1.viewportSize = {
          width: 1546,
          height: 2048
        };
      }
      if ((_ref2 = (_base2 = this.options).loadImages) == null) {
        _base2.loadImages = false;
      }
      if ((_ref3 = (_base3 = this.options).verbose) == null) {
        _base3.verbose = false;
      }
      if ((_ref4 = (_base4 = this.options).excludeDomains) == null) {
        _base4.excludeDomains = [];
      }
      if ((_ref5 = (_base5 = this.options).urlPrefix) == null) {
        _base5.urlPrefix = '';
      }
      if ((_ref6 = (_base6 = this.options).autoScreenshot) == null) {
        _base6.autoScreenshot = false;
      }
      this.debug('init');
      this.init(fn);
    }

    Browser.prototype.debug = function() {
      var args;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (this.options.verbose) {
        return console.log.apply(console, ["Browser>"].concat(__slice.call(args)));
      }
    };

    Browser.prototype.evaluate = function() {
      var args, fn, script, _ref;

      script = arguments[0], fn = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      this.debug('Evaluating: ', script.toString().replace(/\n/g, ' ').slice(0, 100) + '...');
      return (_ref = this.page).evaluate.apply(_ref, [script, fn].concat(__slice.call(args)));
    };

    Browser.prototype.init = function(fn) {
      var _this = this;

      if (fn == null) {
        fn = null;
      }
      return phantom.create(function(ph) {
        _this.ph = ph;
        return _this.ph.createPage(function(page) {
          _this.page = page;
          _this.page.set('viewportSize', _this.options.viewportSize);
          _this.page.set('loadImages', _this.options.loadImages);
          _this.page.set('onConsoleMessage', _this.onPageConsoleMessage);
          _this.page.set('onAlert', _this.onPageAlert);
          _this.page.set('onError', _this.onPageError);
          _this.page.set('onResourceRequested', _this.onResourceRequested);
          _this.page.set('onResourceReceived', _this.onResourceReceived);
          _this.page.set('settings.userAgent', _this.options.userAgent);
          _this.emit('ready');
          if (fn) {
            return fn();
          }
        });
      });
    };

    Browser.prototype.onResourceRequested = function(request) {
      var domain;

      domain = request.url.split(/\//)[2];
      if (__indexOf.call(this.options.excludeDomains, domain) < 0) {
        this.debug('Skipping Resource', request.url);
        return false;
      }
    };

    Browser.prototype.onResourceReceive = function(response) {
      return this.debug('ResourceResponse>', response.id);
    };

    Browser.prototype.onPageError = function(msg, trace) {
      return this.debug('Error> ', msg, trace);
    };

    Browser.prototype.onPageConsoleMessage = function(msg, line, source) {
      return this.debug('Console> ', msg, line, source);
    };

    Browser.prototype.onPageAlert = function(msg) {
      return this.debug('Alert> ', msg);
    };

    Browser.prototype.open = function(path) {
      var url,
        _this = this;

      url = "" + this.options.urlPrefix + path;
      this.debug("url", url);
      return this.page.open(url, function(status) {
        if (!status) {
          return;
        }
        _this.emit('open', path);
        _this.emit("open::" + path);
        _this.debug("opened status", status);
        if (_this.options.autoScreenshot) {
          return _this.page.render("last.png");
        }
      });
    };

    return Browser;

  })(EventEmitter);

}).call(this);
